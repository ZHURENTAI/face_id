#include <ros/ros.h>  
#include <image_transport/image_transport.h>  
#include <cv_bridge/cv_bridge.h>  
#include <sensor_msgs/image_encodings.h>  
#include <opencv2/imgproc/imgproc.hpp>  
#include <opencv2/highgui/highgui.hpp>    
using namespace std;  
using namespace cv;  
static const string OPENCV_WINDOW = "Image window";  
      

 void imageCb(const sensor_msgs::ImageConstPtr& msg)  
{  
      cv_bridge::CvImagePtr cv_ptr;  
      try  
      {  
         cv_ptr = cv_bridge::toCvCopy(msg, "bgr8");  
      }  
      catch (cv_bridge::Exception& e)  
      {  
         ROS_ERROR("cv_bridge exception: %s", e.what());  
         return;  
      }  
      
      Mat img_rgb;  
      img_rgb = cv_ptr->image;   
      imshow(OPENCV_WINDOW, img_gray);  
      waitKey(3);  
}


int main(int argc, char** argv)  
{
     ros::init(argc, argv, "sub"); 
     ros::NodeHandle nh;  
     image_transport::ImageTransport it(nh);  
     image_transport::Subscriber sub = it.subscribe("imgmsg", 1, imageCb);
     namedWindow(OPENCV_WINDOW); 
     ros::spin();    
     destroyWindow(OPENCV_WINDOW);  
     return 0;  
}
